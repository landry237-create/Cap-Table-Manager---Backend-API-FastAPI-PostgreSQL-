# email_simulator.py

# simulateur d'envoi d'emails pour les tests en l'affichant dans la console

"""def send_email(subject: str, body: str, to: str, recipient_name: str = None):
    print(f"Email sent to {to} ({recipient_name}):")
    print(f"Subject: {subject}")
    print(f"Body: {body}")
    print("-" * 40)
    db_user = db.query(models.User).filter(models.User.email == token_data.email).first()
    if not db_user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Log de l'√©v√®nement
    log_event(db, schemas.AuditLogCreate(
        action="send_email",
        user_id=db_user.id,
        details=f"Email sent to {to} with subject '{subject}'."
    ))
    
    return {"message": "Email sent successfully."}

üîç Pourquoi un simulateur d'email ?"""

# email_simulator.py

# Simule un envoi d‚Äôe-mail en l‚Äôaffichant dans la console
def send_email(subject: str, recipient: str):
    print(f"\n[üìß EMAIL SIMUL√â]")
    print(f"√Ä : {recipient}")
    print(f"Sujet : {subject}")
    print("Contenu : Cet email est une simulation de notification.")
    print("-" * 50)
# Utilis√© pour les tests et le d√©veloppement
# Permet de v√©rifier le format et le contenu sans envoyer de vrais emails
# Utile pour les environnements de test ou de d√©veloppement o√π l'envoi d'emails n'est pas souhait√©
# √âvite les d√©pendances externes et les configurations d'email en production
# Permet de valider la logique d'envoi d'emails sans effets secondaires

"""üîç Pourquoi simuler ?

R√©pond √† la contrainte du test : pas besoin de serveur SMTP r√©el.

Facilement rempla√ßable par un vrai syst√®me (SMTP, SendGrid, Mailjet‚Ä¶)."""